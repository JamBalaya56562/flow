Error ------------------------------------------------------------------------------------------- disjoint_union.js:8:22

Cannot compare string literal `square` [1] with property `type` of `shape` [2] because: [incompatible-type]
 - Either cannot compare string literal `square` [1] with property `type` of `shape` [2] because string literal
   `square` [1] is incompatible with string literal `rectangle` [3].
 - Or cannot compare string literal `square` [1] with property `type` of `shape` [2] because string literal `square` [1]
   is incompatible with string literal `circle` [4].

   disjoint_union.js:8:22
   8|   if (shape.type === 'square') { // error
                           ^^^^^^^^ [1]

References:
   disjoint_union.js:7:15
   7| function area(shape: Shape): number {
                    ^^^^^ [2]
   disjoint_union.js:4:10
   4|   {type: 'rectangle', width: number, height: number} |
               ^^^^^^^^^^^ [3]
   disjoint_union.js:5:10
   5|   {type: 'circle', radius: number};
               ^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:21:22

Cannot compare string literal `square` [1] with property `type` of `shape` [2] because: [incompatible-type]
 - Either cannot compare string literal `square` [1] with property `type` of `shape` [2] because string literal
   `square` [1] is incompatible with string literal `rectangle` [3].
 - Or cannot compare string literal `square` [1] with property `type` of `shape` [2] because string literal `square` [1]
   is incompatible with string literal `circle` [4].

   disjoint_union.js:21:22
   21|   if (shape.type === 'square') { // error
                            ^^^^^^^^ [1]

References:
   disjoint_union.js:20:16
   20| function area2(shape: ExactShape): number {
                      ^^^^^ [2]
   disjoint_union.js:17:11
   17|   {|type: 'rectangle', width: number, height: number|} |
                 ^^^^^^^^^^^ [3]
   disjoint_union.js:18:11
   18|   {|type: 'circle', radius: number|};
                 ^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:34:22

Cannot compare string literal `square` [1] with property `type` of `shape` [2] because: [incompatible-type]
 - Either cannot compare string literal `square` [1] with property `type` of `shape` [2] because string literal
   `square` [1] is incompatible with string literal `rectangle` [3].
 - Or cannot compare string literal `square` [1] with property `type` of `shape` [2] because string literal `square` [1]
   is incompatible with string literal `circle` [4].

   disjoint_union.js:34:22
   34|   if (shape.type === 'square') { // error
                            ^^^^^^^^ [1]

References:
   disjoint_union.js:33:16
   33| function area3(shape: ReadOnlyShape): number {
                      ^^^^^ [2]
   disjoint_union.js:30:11
   30|   {+type: 'rectangle', width: number, height: number} |
                 ^^^^^^^^^^^ [3]
   disjoint_union.js:31:11
   31|   {+type: 'circle', radius: number};
                 ^^^^^^^^ [4]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:56:12

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:56:12
   56|       case C: break; // error C is not included in 'A' | 'B'
                  ^

References:
   disjoint_union.js:45:9
   45|   const C: 'C' = 'C';
               ^ [1]
   disjoint_union.js:52:18
   52|   function test1(x: AorB) {
                        ^ [2]
   disjoint_union.js:45:12
   45|   const C: 'C' = 'C';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:57:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:57:12
   57|       case D: break; // error D is not included in 'A' | 'B'
                  ^

References:
   disjoint_union.js:46:9
   46|   const D: 'D' = 'D';
               ^ [1]
   disjoint_union.js:52:18
   52|   function test1(x: AorB) {
                        ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:65:12

Cannot compare `OBJ.C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `OBJ.C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `OBJ.C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `B` [5].

   disjoint_union.js:65:12
   65|       case OBJ.C: break; // error C is not included in 'A' | 'B'
                  ^^^^^ [1]

References:
   disjoint_union.js:61:19
   61|   function test1a(x: AorB) {
                         ^ [2]
   disjoint_union.js:45:12
   45|   const C: 'C' = 'C';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:66:12

Cannot compare `OBJ.D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `OBJ.D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `OBJ.D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `B` [5].

   disjoint_union.js:66:12
   66|       case OBJ.D: break; // error D is not included in 'A' | 'B'
                  ^^^^^ [1]

References:
   disjoint_union.js:61:19
   61|   function test1a(x: AorB) {
                         ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:73:20

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:73:20
   73|     if (x.type === C) {}; // error C is not included in 'A' | 'B'
                          ^

References:
   disjoint_union.js:45:9
   45|   const C: 'C' = 'C';
               ^ [1]
   disjoint_union.js:70:18
   70|   function test2(x: AorB) {
                        ^ [2]
   disjoint_union.js:45:12
   45|   const C: 'C' = 'C';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:74:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:74:20
   74|     if (x.type === D) {}; // error D is not included in 'A' | 'B'
                          ^

References:
   disjoint_union.js:46:9
   46|   const D: 'D' = 'D';
               ^ [1]
   disjoint_union.js:70:18
   70|   function test2(x: AorB) {
                        ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:80:12

Cannot compare `B` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:80:12
   80|       case B: break; // error B is not included in 'A'
                  ^

References:
   disjoint_union.js:44:9
   44|   const B: 'B' = 'B';
               ^ [1]
   disjoint_union.js:77:18
   77|   function test3(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:44:12
   44|   const B: 'B' = 'B';
                  ^^^ [3]
   disjoint_union.js:50:22
   50|   type AorC = {type: 'A'} | {type: 'C'};
                            ^^^ [4]
   disjoint_union.js:50:36
   50|   type AorC = {type: 'A'} | {type: 'C'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:81:12

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:81:12
   81|       case C: break; // error C is not included in 'A'
                  ^

References:
   disjoint_union.js:45:9
   45|   const C: 'C' = 'C';
               ^ [1]
   disjoint_union.js:77:18
   77|   function test3(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:45:12
   45|   const C: 'C' = 'C';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:82:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:82:12
   82|       case D: break; // error D is not included in 'A'
                  ^

References:
   disjoint_union.js:46:9
   46|   const D: 'D' = 'D';
               ^ [1]
   disjoint_union.js:77:18
   77|   function test3(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:82:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:82:12
   82|       case D: break; // error D is not included in 'A'
                  ^

References:
   disjoint_union.js:46:9
   46|   const D: 'D' = 'D';
               ^ [1]
   disjoint_union.js:77:18
   77|   function test3(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:50:22
   50|   type AorC = {type: 'A'} | {type: 'C'};
                            ^^^ [4]
   disjoint_union.js:50:36
   50|   type AorC = {type: 'A'} | {type: 'C'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:88:20

Cannot compare `B` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:88:20
   88|     if (x.type === B) {}; // error B is not included in 'A'
                          ^

References:
   disjoint_union.js:44:9
   44|   const B: 'B' = 'B';
               ^ [1]
   disjoint_union.js:86:18
   86|   function test4(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:44:12
   44|   const B: 'B' = 'B';
                  ^^^ [3]
   disjoint_union.js:50:22
   50|   type AorC = {type: 'A'} | {type: 'C'};
                            ^^^ [4]
   disjoint_union.js:50:36
   50|   type AorC = {type: 'A'} | {type: 'C'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:89:20

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:89:20
   89|     if (x.type === C) {}; // error C is not included in 'A'
                          ^

References:
   disjoint_union.js:45:9
   45|   const C: 'C' = 'C';
               ^ [1]
   disjoint_union.js:86:18
   86|   function test4(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:45:12
   45|   const C: 'C' = 'C';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:90:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:90:20
   90|     if (x.type === D) {}; // error D is not included in 'A'
                          ^

References:
   disjoint_union.js:46:9
   46|   const D: 'D' = 'D';
               ^ [1]
   disjoint_union.js:86:18
   86|   function test4(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:49:22
   49|   type AorB = {type: 'A'} | {type: 'B'};
                            ^^^ [4]
   disjoint_union.js:49:36
   49|   type AorB = {type: 'A'} | {type: 'B'};
                                          ^^^ [5]


Error ------------------------------------------------------------------------------------------ disjoint_union.js:90:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:90:20
   90|     if (x.type === D) {}; // error D is not included in 'A'
                          ^

References:
   disjoint_union.js:46:9
   46|   const D: 'D' = 'D';
               ^ [1]
   disjoint_union.js:86:18
   86|   function test4(x: AorB & AorC) {
                        ^ [2]
   disjoint_union.js:46:12
   46|   const D: 'D' = 'D';
                  ^^^ [3]
   disjoint_union.js:50:22
   50|   type AorC = {type: 'A'} | {type: 'C'};
                            ^^^ [4]
   disjoint_union.js:50:36
   50|   type AorC = {type: 'A'} | {type: 'C'};
                                          ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:100:12

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:100:12
   100|       case C: break; // error C is not included in 'A'|'B'
                   ^

References:
   disjoint_union.js:45:9
    45|   const C: 'C' = 'C';
                ^ [1]
   disjoint_union.js:96:18
    96|   function test5(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:45:12
    45|   const C: 'C' = 'C';
                   ^^^ [3]
   disjoint_union.js:93:23
    93|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:94:23
    94|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:101:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:101:12
   101|       case D: break; // error D is not included in 'A'|'B'
                   ^

References:
   disjoint_union.js:46:9
    46|   const D: 'D' = 'D';
                ^ [1]
   disjoint_union.js:96:18
    96|   function test5(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:46:12
    46|   const D: 'D' = 'D';
                   ^^^ [3]
   disjoint_union.js:93:23
    93|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:94:23
    94|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:108:20

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:108:20
   108|     if (x.type === C) {}; // error C is not included in 'A'|'B'
                           ^

References:
   disjoint_union.js:45:9
    45|   const C: 'C' = 'C';
                ^ [1]
   disjoint_union.js:105:18
   105|   function test6(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:45:12
    45|   const C: 'C' = 'C';
                   ^^^ [3]
   disjoint_union.js:93:23
    93|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:94:23
    94|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:109:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:109:20
   109|     if (x.type === D) {}; // error D is not included in 'A'|'B'
                           ^

References:
   disjoint_union.js:46:9
    46|   const D: 'D' = 'D';
                ^ [1]
   disjoint_union.js:105:18
   105|   function test6(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:46:12
    46|   const D: 'D' = 'D';
                   ^^^ [3]
   disjoint_union.js:93:23
    93|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:94:23
    94|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:126:12

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:126:12
   126|       case C: break; // error C is not included in 'A' | 'B'
                   ^

References:
   disjoint_union.js:116:9
   116|   const C = 'C';
                ^ [1]
   disjoint_union.js:122:18
   122|   function test1(x: AorB) {
                         ^ [2]
   disjoint_union.js:116:13
   116|   const C = 'C';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:127:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:127:12
   127|       case D: break; // error D is not included in 'A' | 'B'
                   ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:122:18
   122|   function test1(x: AorB) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:134:20

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:134:20
   134|     if (x.type === C) {}; // error C is not included in 'A' | 'B'
                           ^

References:
   disjoint_union.js:116:9
   116|   const C = 'C';
                ^ [1]
   disjoint_union.js:131:18
   131|   function test2(x: AorB) {
                         ^ [2]
   disjoint_union.js:116:13
   116|   const C = 'C';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:135:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:135:20
   135|     if (x.type === D) {}; // error D is not included in 'A' | 'B'
                           ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:131:18
   131|   function test2(x: AorB) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:141:12

Cannot compare `B` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:141:12
   141|       case B: break; // error B is not included in 'A'
                   ^

References:
   disjoint_union.js:115:9
   115|   const B = 'B';
                ^ [1]
   disjoint_union.js:138:18
   138|   function test3(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:115:13
   115|   const B = 'B';
                    ^^^ [3]
   disjoint_union.js:120:22
   120|   type AorC = {type: 'A'} | {type: 'C'};
                             ^^^ [4]
   disjoint_union.js:120:36
   120|   type AorC = {type: 'A'} | {type: 'C'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:142:12

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:142:12
   142|       case C: break; // error C is not included in 'A'
                   ^

References:
   disjoint_union.js:116:9
   116|   const C = 'C';
                ^ [1]
   disjoint_union.js:138:18
   138|   function test3(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:116:13
   116|   const C = 'C';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:143:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:143:12
   143|       case D: break; // error D is not included in 'A'
                   ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:138:18
   138|   function test3(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:143:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:143:12
   143|       case D: break; // error D is not included in 'A'
                   ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:138:18
   138|   function test3(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:120:22
   120|   type AorC = {type: 'A'} | {type: 'C'};
                             ^^^ [4]
   disjoint_union.js:120:36
   120|   type AorC = {type: 'A'} | {type: 'C'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:149:20

Cannot compare `B` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `B` [1] with property `type` of `x` [2] because string literal `B` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:149:20
   149|     if (x.type === B) {}; // error B is not included in 'A'
                           ^

References:
   disjoint_union.js:115:9
   115|   const B = 'B';
                ^ [1]
   disjoint_union.js:147:18
   147|   function test4(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:115:13
   115|   const B = 'B';
                    ^^^ [3]
   disjoint_union.js:120:22
   120|   type AorC = {type: 'A'} | {type: 'C'};
                             ^^^ [4]
   disjoint_union.js:120:36
   120|   type AorC = {type: 'A'} | {type: 'C'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:150:20

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:150:20
   150|     if (x.type === C) {}; // error C is not included in 'A'
                           ^

References:
   disjoint_union.js:116:9
   116|   const C = 'C';
                ^ [1]
   disjoint_union.js:147:18
   147|   function test4(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:116:13
   116|   const C = 'C';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:151:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:151:20
   151|     if (x.type === D) {}; // error D is not included in 'A'
                           ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:147:18
   147|   function test4(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:119:22
   119|   type AorB = {type: 'A'} | {type: 'B'};
                             ^^^ [4]
   disjoint_union.js:119:36
   119|   type AorB = {type: 'A'} | {type: 'B'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:151:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `C` [5].

   disjoint_union.js:151:20
   151|     if (x.type === D) {}; // error D is not included in 'A'
                           ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:147:18
   147|   function test4(x: AorB & AorC) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:120:22
   120|   type AorC = {type: 'A'} | {type: 'C'};
                             ^^^ [4]
   disjoint_union.js:120:36
   120|   type AorC = {type: 'A'} | {type: 'C'};
                                           ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:161:12

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:161:12
   161|       case C: break; // error C is not included in 'A'|'B'
                   ^

References:
   disjoint_union.js:116:9
   116|   const C = 'C';
                ^ [1]
   disjoint_union.js:157:18
   157|   function test5(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:116:13
   116|   const C = 'C';
                    ^^^ [3]
   disjoint_union.js:154:23
   154|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:155:23
   155|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:162:12

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:162:12
   162|       case D: break; // error D is not included in 'A'|'B'
                   ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:157:18
   157|   function test5(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:154:23
   154|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:155:23
   155|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:169:20

Cannot compare `C` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `C` [1] with property `type` of `x` [2] because string literal `C` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:169:20
   169|     if (x.type === C) {}; // error C is not included in 'A'|'B'
                           ^

References:
   disjoint_union.js:116:9
   116|   const C = 'C';
                ^ [1]
   disjoint_union.js:166:18
   166|   function test6(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:116:13
   116|   const C = 'C';
                    ^^^ [3]
   disjoint_union.js:154:23
   154|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:155:23
   155|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------- disjoint_union.js:170:20

Cannot compare `D` [1] with property `type` of `x` [2] because: [incompatible-type]
 - Either cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with
   string literal `A` [4].
 - Or cannot compare `D` [1] with property `type` of `x` [2] because string literal `D` [3] is incompatible with string
   literal `B` [5].

   disjoint_union.js:170:20
   170|     if (x.type === D) {}; // error D is not included in 'A'|'B'
                           ^

References:
   disjoint_union.js:117:9
   117|   const D = 'D';
                ^ [1]
   disjoint_union.js:166:18
   166|   function test6(x: AandP | BandP) {
                         ^ [2]
   disjoint_union.js:117:13
   117|   const D = 'D';
                    ^^^ [3]
   disjoint_union.js:154:23
   154|   type AandP = {type: 'A', ...} & {prop: 1, ...};
                              ^^^ [4]
   disjoint_union.js:155:23
   155|   type BandP = {type: 'B', ...} & {prop: 1, ...};
                              ^^^ [5]


Error ----------------------------------------------------------------------------------------------------- enum.js:6:25

Invalid check of number literal `2` against `Binary` [1] because number [2] is incompatible with `Binary` [1].
[incompatible-type]

   enum.js:6:25
   6|   } else if (binary === 2) { // oops
                              ^ [2]

References:
   enum.js:3:34
   3| function stringifyBinary(binary: Binary): string {
                                       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- generics.js:3:19

Cannot compare string literal `q` [1] with property `type` of `mm` [2] because string literal `q` [1] is incompatible
with union type [3]. [incompatible-type]

   generics.js:3:19
   3|   if (mm.type === 'q'); // Error 'q' is not included in 's' | 'p'
                        ^^^ [1]

References:
   generics.js:1:27
   1| function f1<T: 's' | 'p'>(mm: { type: T }) {
                                ^^ [2]
   generics.js:1:16
   1| function f1<T: 's' | 'p'>(mm: { type: T }) {
                     ^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ generics.js:12:19

Cannot compare string literal `q` [1] with property `type` of `mm` [2] because: [incompatible-type]
 - Either cannot compare string literal `q` [1] with property `type` of `mm` [2] because string literal `q` [1] is
   incompatible with string literal `s` [3].
 - Or cannot compare string literal `q` [1] with property `type` of `mm` [2] because string literal `q` [1] is
   incompatible with string literal `p` [4].

   generics.js:12:19
   12|   if (mm.type === 'q'); // Error 'q' is not included in 's' | 'p'
                         ^^^ [1]

References:
   generics.js:9:9
    9|   const mm: M = m_orig;
               ^^ [2]
   generics.js:6:24
    6| type Message = { type: 's', v: number } | { type: 'p', x: string };
                              ^^^ [3]
   generics.js:6:51
    6| type Message = { type: 's', v: number } | { type: 'p', x: string };
                                                         ^^^ [4]



Found 40 errors
